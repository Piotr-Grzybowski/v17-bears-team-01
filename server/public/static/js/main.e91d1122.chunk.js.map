{"version":3,"sources":["components/Views/Landing/Landing.module.scss","components/Views/Dashboard/Dashboard.module.scss","components/Views/AllTimes/AllTimes.module.scss","components/Views/Calendar/Calendar.module.scss","components/Simple/Button/Button.module.scss","components/Views/FinalMeeting/FinalMeeting.module.scss","context/app-context.js","components/Views/Login/Login.js","components/Simple/Button/Button.js","components/Views/Landing/Landing.js","components/Views/Calendar/Calendar.js","components/Views/Create/Create.js","components/Views/Join/Join.js","components/Views/Dashboard/Dashboard.js","components/Views/AllTimes/AllTimes.js","components/Views/FinalMeeting/FinalMeeting.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppContext","React","createContext","Login","className","href","Component","Button","variant","otherProps","styles","component","split","map","name","join","Landing","props","buttonClick","bind","state","loginButton","this","setState","title","iconBackground","icon","faCalendarAlt","subtitle","buttons","onClick","process","CalendarView","onChange","date","onClickDay","userDate","Date","time","data","day","id","value","rArr","Object","entries","push","moment","unix","handleCalendarChange","console","log","days","format","context","updateCalDays","calendarView","meetAt","testing","index","key","type","e","onChangeTime","target","contextType","CREATE_MEETING","gql","Create","meetingName","email","yourInitials","lengthOfMeeting","timeZone","timezone","tz","guess","rtnArr","createMeeting","preventDefault","variables","description","duration","parseInt","availability","participants","catch","error","returnArr","mutation","onSubmit","handleSubmit","htmlFor","required","placeholder","trim","disabled","JOIN_MEETING","GET_MEETINGS","Join","onChangeMeeting","handleCalenderChange","currentMeeting","meetingID","joinMeeting","length","intervals","then","query","loading","message","getJoinMeetings","meeting","Dashboard","useQuery","to","getMeetings","meetings","GET_USERS_AND_MEETING","AllTimes","meetingId","vote","voted","location","pathname","RegExp","getMeetingId","timesContainer","meetingInfo","getMeeting","getUsers","user","author","timeInfo","participant","user_id","withRouter","FinalMeeting","finalContainer","link","HttpLink","uri","credentials","client","ApolloClient","cache","InMemoryCache","connectToDevTools","App","authenticated","meetingLength","userTimes","JSON","stringify","timeArr","fetch","method","headers","Accept","response","status","json","Error","responseJson","Provider","exact","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e91d1122.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Landing_component__2t3KD\",\"title\":\"Landing_title__UDr5J\",\"subtitle\":\"Landing_subtitle__1p0Pk\",\"buttons\":\"Landing_buttons__2ZprL\",\"iconBackground\":\"Landing_iconBackground__1SvBe\",\"icon\":\"Landing_icon__17t7e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Dashboard_component__18l3h\",\"buttons\":\"Dashboard_buttons__1PAXU\",\"meetings\":\"Dashboard_meetings__1yM9e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"timesContainer\":\"AllTimes_timesContainer__22Bq1\",\"meetingInfo\":\"AllTimes_meetingInfo__1BD_X\",\"timeInfo\":\"AllTimes_timeInfo__1mRPZ\",\"voted\":\"AllTimes_voted__1pm8A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"calendarView\":\"Calendar_calendarView__3GDNw\",\"meetingLength\":\"Calendar_meetingLength__22ZeT\",\"meetAt\":\"Calendar_meetAt__vMlzs\",\"testing\":\"Calendar_testing__MeUWi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Button_component__3XFbS\",\"primary\":\"Button_primary__3jblc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"finalContainer\":\"FinalMeeting_finalContainer__dqGeU\"};","import React from 'react';\n\nconst AppContext = React.createContext();\n\nexport default AppContext;","import React from 'react';\nimport './Login.css';\n\n// Point to dashboard\n\nexport default class Login extends React.Component {\n  render() {\n    return (\n      <div className='login-container'>\n        <a href=\"http://localhost:4000/auth/facebook\" className=\"loginBtn loginBtn--facebook\">\n        Login with Facebook\n        </a>\n  \n        <a href=\"http://localhost:4000/auth/google\" className=\"loginBtn loginBtn--google\">\n        Login with Google\n        </a>\n      </div>\n    );\n  }\n  }\n\n","import React from 'react';\nimport styles from './Button.module.scss';\n\n// eslint-disable-next-line react/prop-types\nconst Button = ({ variant = '', ...otherProps }) => (\n  <button\n    {...otherProps}\n    className={\n      styles.component +\n      variant\n        .split(' ')\n        .map(name => ' ' + (styles[name] || name))\n        .join('')\n    }\n  />\n);\n\nexport default Button;\n","import React from 'react';\nimport Button from '../../Simple/Button/Button';\nimport styles from './Landing.module.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendarAlt } from '@fortawesome/free-solid-svg-icons';\n\nexport default class Landing extends React.Component {\n  constructor(props) {\n    super(props);\n    this.buttonClick = this.buttonClick.bind(this);\n    this.state = {\n      loginButton: false\n    };\n  }\n\n  buttonClick() {\n    this.setState({ loginButton: true });\n  }\n\n  render() {\n    return (\n      <div className={styles.component}>\n        <div className={styles.title}>\n          <div className={styles.iconBackground}>\n            <FontAwesomeIcon className={styles.icon} icon={faCalendarAlt} />\n          </div>\n          <h1>envite</h1>\n        </div>\n        <h3 className={styles.subtitle}>Bringing Peple Together</h3>\n        <div className={styles.buttons}>\n          {this.state.loginButton === false ? (\n            <Button onClick={this.buttonClick}>start meeting people</Button>\n          ) : (\n            <div className=\"login-container\">\n              <a\n                href={process.env.REACT_APP_SERVER + '/auth/facebook'}\n                className=\"loginBtn loginBtn--facebook\"\n              >\n                Login with Facebook\n              </a>\n\n              <a\n                href={process.env.REACT_APP_SERVER + '/auth/google'}\n                className=\"loginBtn loginBtn--google\"\n              >\n                Login with Google\n              </a>\n            </div>\n          )}\n        </div>\n        {/* <a href=\"http://localhost:4000/auth/logout\">Click to log out</a> */}\n      </div>\n    );\n  }\n}\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport AppContext from '../../../context/app-context';\nimport Calendar from 'react-calendar';\nimport moment from 'moment';\nimport styles from './Calendar.module.scss';\nimport './Cal.css';\n// import { Link } from 'react-router-dom';\n\nexport default class CalendarView extends React.Component {\n  static contextType = AppContext;\n  constructor(props) {\n    super(props);\n    this.onClickDay = this.onClickDay.bind(this);\n    this.state = {\n      userDate: [],\n      date: new Date(),\n      time: {}\n    };\n  }\n\n  onChange = (date) => this.setState({ date });\n\n  onChangeTime(data, day) {\n    this.setState((state) => {\n      state.time[data.id] = day + ' ' + data.value;\n      let rArr = [];\n      // eslint-disable-next-line\n      for (let [key, value] of Object.entries(this.state.time)) {\n        rArr.push(moment(value, 'MMM Do YY HH:mm').unix());\n      }\n      this.props.handleCalendarChange(rArr);\n    });\n\n    console.log('test time', this.state.time);\n  }\n\n  onClickDay(value) {\n    let days = moment(value).format('MMM Do YY');\n    this.context.updateCalDays(days);\n    this.setState((state) => {\n      state.userDate.push(days);\n    });\n  }\n\n  // onSubmit(){\n  //     console.log(\"works\");\n  //     let returnArr = [];\n  //     //Convert time objects to unix using moment\n  //     // eslint-disable-next-line\n  //     for(let [key, value] of Object.entries(this.state.time)){\n  //         returnArr.push(moment(value,\"MMM Do YY HH:mm\").unix());\n  //     }\n  //     this.props.handleSubmit(returnArr, this.props.meeting);\n  // }\n\n  render() {\n    return (\n      <div className={styles.calendarView}>\n        <Calendar\n          onChange={this.onChange}\n          value={this.state.date}\n          onClickDay={this.onClickDay}\n        />\n        <div className={styles.meetAt}>\n          <div>\n            <ul className={styles.testing}>\n              {this.state.userDate.map((day, index) => (\n                <li key={day}>\n                  <input\n                    type=\"time\"\n                    id={index}\n                    name=\"meetingTime\"\n                    onChange={(e) => {\n                      this.onChangeTime(e.target, day);\n                    }}\n                  ></input>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n/*\n<Link to=\"/AllTimes\">\n                    <button onClick={this.onSubmit()} className='submitTime' type='submit'>Submit Times</button> \n                </Link>\n                */\n","import React from 'react';\nimport { Mutation } from '@apollo/react-components';\nimport { gql } from 'apollo-boost';\nimport Calendar from '../Calendar/Calendar';\nimport timezone from 'moment-timezone';\nimport './Create.css';\nimport Button from '../../Simple/Button/Button';\n\nconst CREATE_MEETING = gql`\n  mutation createMeeting(\n    $title: String!\n    $description: String!\n    $duration: Int!\n    $timezone: String!\n    $availability: [Int!]!\n    $participants: [String!]!\n  ) {\n    createMeeting(\n      title: $title\n      description: $description\n      duration: $duration\n      timezone: $timezone\n      availability: $availability\n      participants: $participants\n    ) {\n      title\n      author\n      description\n      duration\n      timezone\n      availability\n      participants {\n        user_id\n      }\n    }\n  }\n`;\n\nexport default class Create extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      meetingName: '',\n      email: '',\n      yourInitials: '',\n      lengthOfMeeting: 0,\n      timeZone: timezone.tz.guess(),\n      rtnArr: []\n    };\n  }\n\n  handleSubmit(e, createMeeting) {\n    e.preventDefault();\n    createMeeting({\n      variables: {\n        title: this.state.meetingName,\n        description: '',\n        duration: parseInt(this.state.lengthOfMeeting),\n        timezone: this.state.timeZone,\n        availability: this.state.rtnArr,\n        participants: this.state.participants\n      }\n    }).catch((error) => console.log(error));\n    console.log('Create Meeting Test');\n  }\n\n  handleCalendarChange(returnArr) {\n    this.setState({\n      rtnArr: returnArr\n    });\n  }\n\n  render() {\n    console.log(this.state);\n    return (\n      <Mutation mutation={CREATE_MEETING}>\n        {(createMeeting) => (\n          <div className=\"create-container\">\n            <div>\n              <h2 className=\"title\">Create a Meeting</h2>\n              <Calendar\n                handleCalendarChange={this.handleCalendarChange.bind(this)}\n              />\n            </div>\n            <form\n              className=\"create-form\"\n              onSubmit={(e) => {\n                this.handleSubmit(e, createMeeting);\n              }}\n            >\n              <label htmlFor=\"meetingName\">Meeting Name</label>\n              <input\n                className=\"join-input\"\n                required\n                name=\"meetingName\"\n                id=\"meetingName\"\n                placeholder=\"Meeting Name\"\n                type=\"text\"\n                onChange={(e) =>\n                  this.setState({ meetingName: e.target.value.trim() })\n                }\n              ></input>\n              <label htmlFor=\"email\">Email</label>\n              <input\n                className=\"join-input\"\n                required\n                name=\"email\"\n                id=\"email\"\n                placeholder=\"Email\"\n                type=\"email\"\n                onChange={(e) =>\n                  this.setState({ email: e.target.value.trim() })\n                }\n              ></input>\n              <label htmlFor=\"yourInitials\">Your Initials</label>\n              <input\n                className=\"join-input\"\n                required\n                name=\"yourInitials\"\n                id=\"yourInitials\"\n                placeholder=\"Your Initials\"\n                type=\"text\"\n                onChange={(e) =>\n                  this.setState({ yourInitials: e.target.value.trim() })\n                }\n              ></input>\n              <label htmlFor=\"lengthOfMeeting\">Length of Meeting</label>\n              <input\n                className=\"join-input\"\n                required\n                name=\"lengthOfMeeting\"\n                id=\"lengthOfMeeting\"\n                placeholder=\"Length of Meeting\"\n                type=\"number\"\n                onChange={(e) =>\n                  this.setState({ lengthOfMeeting: e.target.value.trim() })\n                }\n              ></input>\n              <label htmlFor=\"timeZone\">Time Zone</label>\n              <input\n                className=\"join-input\"\n                required\n                name=\"timeZone\"\n                id=\"timeZone\"\n                value={this.state.timeZone}\n                placeholder=\"Time Zone\"\n                type=\"text\"\n                disabled\n                onChange={(e) =>\n                  this.setState({ timeZone: e.target.value.trim() })\n                }\n              ></input>\n              <label htmlFor=\"participants\">Participants</label>\n              <input\n                className=\"join-input\"\n                required\n                name=\"participants\"\n                id=\"participants\"\n                placeholder=\"Participants(emails)\"\n                type=\"text\"\n                onChange={(e) => {\n                  const participants = e.target.value.trim().split(', ');\n                  this.setState({ participants: participants });\n                }}\n              ></input>\n\n              <Button className=\"btn-submit\">Submit</Button>\n            </form>\n          </div>\n        )}\n      </Mutation>\n    );\n  }\n}\n","import React from 'react';\nimport { Query, Mutation } from '@apollo/react-components';\nimport { gql } from 'apollo-boost';\nimport './Join.css';\nimport Button from '../../Simple/Button/Button';\n\nconst JOIN_MEETING = gql`\n  mutation joinMeeting($id: ID!, $intervals: [Int]!) {\n    joinMeeting(id: $id, intervals: $intervals) {\n      title\n      author\n      description\n      duration\n      timezone\n      availability\n      participants {\n        user_id\n        intervals\n      }\n    }\n  }\n`;\n\n// eslint-disable-next-line no-unused-vars\nconst GET_MEETINGS = gql`\n  query {\n    getJoinMeetings {\n      id\n      title\n      author\n      duration\n      timezone\n      availability\n      participants {\n        user_id\n        intervals\n      }\n    }\n  }\n`;\n\nexport default class Join extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onChangeMeeting = this.onChangeMeeting.bind(this);\n    this.handleCalendarChange = this.handleCalenderChange.bind(this);\n    this.state = {\n      meetingName: '',\n      email: '',\n      yourInitials: '',\n      timeZone: '',\n      error: null,\n      currentMeeting: '',\n      rtnArr: []\n    };\n  }\n\n  onChangeMeeting(e, meetingID) {\n    this.setState({\n      currentMeeting: meetingID\n    });\n  }\n\n  handleCalenderChange(returnArr) {\n    this.setState({\n      rtnArr: returnArr\n    });\n  }\n\n  handleSubmit(e, joinMeeting) {\n    e.preventDefault();\n    // ERRORS TO DISPLAY\n    if (this.state.currentMeeting === '') {\n      return console.log('Please select a meeting');\n    }\n    console.log(this.state.rtnArr);\n    if (this.state.rtnArr.length === 0) {\n      return console.log('Please select a time');\n    }\n    joinMeeting({\n      variables: {\n        id: this.state.currentMeeting,\n        intervals: this.state.rtnArr\n      }\n    })\n      .then((data) => console.log(data))\n      .catch((error) => console.log(error));\n\n    console.log('Meeting Created!');\n  }\n\n  render() {\n    return (\n      <div className=\"join-container\">\n        <h2>Your Meetings</h2>\n        <div>\n          <Query query={GET_MEETINGS}>\n            {({ loading, error, data }) => {\n              if (loading) return 'Loading...';\n              if (error) return `Error! ${error.message}`;\n              //scuffed\n              if (data.getJoinMeetings === []) {\n                return 'Nothing to show';\n              }\n              //PRINT MEETING DATA\n              console.log(data);\n              return (\n                <ul className=\"meeting-list\">\n                  {data &&\n                    data.getJoinMeetings.map((meeting) => (\n                      <div className=\"options\" key={meeting.id}>\n                        <li key={meeting.id}>\n                          <p>Meeting Name: {meeting.title}</p>\n                          <p>Meeting Length: {meeting.duration} hour</p>\n                        </li>\n                        <Button\n                          type=\"button\"\n                          onClick={(e) => {\n                            this.onChangeMeeting(e.target, meeting.id);\n                          }}\n                          className=\"selectMeeting\"\n                        >\n                          Select\n                        </Button>\n                      </div>\n                    ))}\n                </ul>\n              );\n            }}\n          </Query>\n          <Mutation mutation={JOIN_MEETING}>\n            {(joinMeeting) => (\n              <div>\n                <div>\n                  {/* <Nav /> */}\n                  <form\n                    className=\"join-form\"\n                    onSubmit={(e) => {\n                      this.handleSubmit(e, joinMeeting);\n                    }}\n                  ></form>\n                </div>\n                {/* <div>\n                  {this.state.currentMeeting && (\n                    <Calendar\n                      handleCalendarChange={this.handleCalendarChange.bind(\n                        this\n                      )}\n                    />\n                  )}\n                </div> */}\n              </div>\n            )}\n          </Mutation>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport styles from './Dashboard.module.scss';\nimport Button from '../../Simple/Button/Button';\nimport { Link } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\nconst GET_MEETINGS = gql`\n  {\n    getMeetings {\n      id\n      title\n      author\n      description\n      duration\n      timezone\n      availability\n      participants {\n        user_id\n        intervals\n      }\n    }\n  }\n`;\n\nfunction Dashboard() {\n  const { loading, error, data } = useQuery(GET_MEETINGS);\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <div className={styles.component}>\n      <h1>Dashboard</h1>\n      <div className={styles.buttons}>\n        <Link to=\"/create\">\n          <Button>Create</Button>\n        </Link>\n        <Link to=\"/join\">\n          <Button>Join</Button>\n        </Link>\n        <a href={process.env.REACT_APP_SERVER + '/auth/logout'}>\n          <Button>Log out</Button>\n        </a>\n      </div>\n      {data.getMeetings.length ? (\n        <ul className={styles.meetings}>\n          <h2>Your meetings</h2>\n          {data.getMeetings.map((meeting) => (\n            <li key={meeting.id} value={meeting.id}>\n              <Link to={`/alltimes/${meeting.id}`}>{meeting.title}</Link>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p className={styles.meetings}>\n          You have no meetings. You can create one using button CREATE above\n        </p>\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;\n","/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport styles from './AllTimes.module.scss';\nimport AppContext from '../../../context/app-context';\nimport { Query } from '@apollo/react-components';\nimport { gql } from 'apollo-boost';\nimport { withRouter } from 'react-router';\nimport moment from 'moment';\n\nconst GET_USERS_AND_MEETING = gql`\n  query($id: ID!) {\n    getUsers(id: $id) {\n      id\n      email\n      name\n    }\n    getMeeting(id: $id) {\n      title\n      author\n      description\n      duration\n      timezone\n      availability\n      participants {\n        user_id\n        intervals\n      }\n    }\n  }\n`;\n\nclass AllTimes extends React.Component {\n  static contextType = AppContext;\n  constructor(props) {\n    super(props);\n    this.state = {\n      meetingId: '',\n      participants: [],\n      vote: null,\n      voted: false\n    };\n  }\n\n  getMeetingId() {\n    if (this.props.location.pathname.split(new RegExp('/alltimes/'))[1]) {\n      const meetingId = this.props.location.pathname.split(\n        new RegExp('/alltimes/')\n      )[1];\n      this.setState({ meetingId: meetingId });\n    }\n  }\n\n  componentDidMount() {\n    this.getMeetingId();\n  }\n\n  // buttonClick(time) {\n  //   this.setState({\n  //     vote: time,\n  //     voted: true\n  //   });\n  //   console.log(this.state.vote);\n  // }\n\n  render() {\n    return (\n      <Query\n        query={GET_USERS_AND_MEETING}\n        variables={{\n          id: this.state.meetingId\n        }}\n      >\n        {({ loading, error, data }) => {\n          if (loading) return 'Loading...';\n          if (error) return `Error! ${error.message}`;\n\n          return (\n            <div className={styles.timesContainer}>\n              <header>\n                <h2>User's availability</h2>\n                <div className={styles.meetingInfo}>\n                  <h3>required time:{data.getMeeting.duration} minutes</h3>\n                </div>\n              </header>\n\n              <div>\n                {data.getUsers.map((user, index) => (\n                  <div key={index}>\n                    <h3>{user.name} ({user.email}) can meet at:</h3>\n                    {user.id === data.getMeeting.author ? (\n                      <div>\n                        {data.getMeeting.availability.map((time, index) => (\n                          <div className={styles.timeInfo} key={index}>\n                            <p>\n                              {moment.unix(time).format('MM/DD/YYYY, HH:mmA')}\n                            </p>\n                            {/* <button onClick={() => this.buttonClick(time)}>\n                              vote\n                            </button> */}\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div>\n                        {data.getMeeting.participants.map(\n                          (participant, index) =>\n                            participant.user_id === user.id ? (\n                              <div key={index}>\n                                {participant.intervals.map((time, index) => (\n                                  <div className={styles.timeInfo} key={index}>\n                                    <p>\n                                      {moment\n                                        .unix(time)\n                                        .format('MM/DD/YYYY, HH:mmA')}\n                                    </p>\n                                    {/* <button\n                                      onClick={() => this.buttonClick(time)}\n                                    >\n                                      vote\n                                    </button> */}\n                                  </div>\n                                ))}\n                              </div>\n                            ) : (\n                              <div>\n                                <p>---------------------</p>\n                              </div>\n                            )\n                        )}\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n}\nexport default withRouter(AllTimes);\n","import React from 'react';\nimport styles from './FinalMeeting.module.scss';\n\nexport default class FinalMeeting extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n\n    componentDidMount() {\n        console.log('fetch final meeting');\n    }\n\n    render() {\n        return (\n            <div className={styles.finalContainer}>\n                <p>test</p>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.module.scss';\nimport AppContext from './context/app-context.js';\nimport { Route } from 'react-router-dom';\nimport Login from './components/Views/Login/Login';\nimport Landing from './components/Views/Landing/Landing';\nimport Create from './components/Views/Create/Create';\nimport Join from './components/Views/Join/Join';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport CalendarView from './components/Views/Calendar/Calendar';\nimport Dashboard from './components/Views/Dashboard/Dashboard';\nimport AllTimes from './components/Views/AllTimes/AllTimes';\nimport FinalMeeting from './components/Views/FinalMeeting/FinalMeeting';\n\nconst link = new HttpLink({\n  uri: process.env.REACT_APP_SERVER + '/graphql',\n  credentials: 'include'\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link,\n  connectToDevTools: true\n});\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {},\n      authenticated: false,\n      error: null,\n      meetingLength: 0,\n      userTimes: JSON.stringify(),\n      timeArr: [],\n      updateCalDays: (days) => {\n        this.setState((state) => {\n          state.timeArr.push(days);\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetch(process.env.REACT_APP_SERVER + '/auth/login/success', {\n      method: 'GET',\n      credentials: 'include',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Credentials': true\n      }\n    })\n      .then((response) => {\n        if (response.status === 200) return response.json();\n        throw new Error('failed to authenticate user');\n      })\n      .then((responseJson) => {\n        this.setState({\n          authenticated: true,\n          user: responseJson.user\n        });\n      })\n      .catch(() => {\n        this.setState({\n          authenticated: false,\n          error: 'Failed to authenticate user'\n        });\n      });\n  }\n\n  render() {\n    // console.log(this.state.user);\n    return (\n      <ApolloProvider client={client}>\n        <AppContext.Provider value={this.state}>\n          <div className=\"#\">\n            <Route exact path=\"/\" component={Landing} user={this.state.user} />\n\n            <Route exact path=\"/login\" component={Login} />\n\n            <Route exact path=\"/create\" component={Create} />\n\n            <Route exact path=\"/join\" component={Join} />\n\n            <Route exact path=\"/dashboard\" component={Dashboard} />\n\n            <Route exact path=\"/calendar\" component={CalendarView} />\n\n            <Route exact path=\"/alltimes/:id\" component={AllTimes} />\n\n            <Route exact path=\"/finalmeeting\" component={FinalMeeting} />\n          </div>\n        </AppContext.Provider>\n      </ApolloProvider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/global.scss';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}